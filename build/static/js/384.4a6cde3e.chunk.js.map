{"version":3,"file":"static/js/384.4a6cde3e.chunk.js","mappings":"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","sources":["Home_slider1.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Slider, { Settings } from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { Panel, PanelType } from '@fluentui/react';\nimport \"./CSS/App.css\";\nimport { IoChevronForwardOutline, IoChevronBackOutline, IoCalendarOutline } from \"react-icons/io5\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport SocialMediaIcon from \"./SocialMediaIcon\";\nimport NewsPanel from \"./NewsPanel\";\n\nfunction Home_slider1() {\n  const sliderRef = useRef<Slider | null>(null);\n  const [data, setData] = useState<any>(null);\n  const [slidesToShow, setSlidesToShow] = useState<number>(3);\n  const [slidesToScroll, setSlidesToScroll] = useState<number>(3);\n  const [currentSlide, setCurrentSlide] = useState<number>(0);\n  const GetserverUrl = 'https://eventservers.onrender.com/api/getData';\n  const [selectedNews, setSelectedNews] = useState<any>(null);\n  const [url, setUrl] = useState('');\n\n  const settings: Settings = {\n    dots: false,\n    speed: 500,\n    slidesToShow: slidesToShow,\n    slidesToScroll: slidesToScroll,\n    infinite: false,\n    autoplay: false,\n    autoplaySpeed: 1000,\n    beforeChange: (oldIndex: number, newIndex: number) => {\n      setCurrentSlide(newIndex);\n    }\n\n  };\n  const HTMLRenderer = ({ content }: any) => {\n\n    return (\n      <div\n        className=\"html-content \"\n        dangerouslySetInnerHTML={{ __html: content }}\n      />\n    );\n  };\n\n  const handleNext = () => {\n    if (sliderRef.current && currentSlide < data.length - settings.slidesToShow!) {\n      setCurrentSlide((prev) => prev + 1);\n      sliderRef.current.slickNext();\n    }\n  };\n\n  const handlePrev = () => {\n    if (sliderRef.current && currentSlide > 0) {\n      setCurrentSlide((prev) => prev - 1);\n      sliderRef.current.slickPrev();\n    }\n  };\n\n  const getPublicServerData = async (tableName: any) => {\n    let results: any = [];\n    try {\n      var myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n\n      var raw = JSON.stringify({\n        \"table\": `${tableName}`\n      });\n\n      var requestOptions: any = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n      };\n\n      fetch(\"https://gruene-weltweit.de/SPPublicAPIs/getDataAll.php\", requestOptions)\n        .then(response => response.text())\n        .then((result: any) => {\n          console.log(result, \"ddddd\")\n          result = JSON.parse(result)\n          results = result?.data\n          results.sort((a: any, b: any) => {\n            const dateA: any = new Date(a.PublishingDate);\n            const dateB: any = new Date(b.PublishingDate);\n            return dateB - dateA;\n          });\n          // const sortedData = results.sort((a: any, b: any) => {\n          //   if (a.PublishingDate && b.PublishingDate) {\n          //     const format = \"MMMM DD, YYYY\"; // Define the date format\n          //     const dateA: any = moment(a.PublishingDate, format);\n          //     const dateB: any = moment(b.PublishingDate, format);\n          //     console.log(\"Date A:\", dateA);\n          //     console.log(\"Date B:\", dateB);\n          //     if (dateA.isBefore(dateB)) {\n          //       return 1; // Date A is before Date B, return 1 for descending order\n          //     } else if (dateA.isAfter(dateB)) {\n          //       return -1; // Date A is after Date B, return -1 for descending order\n          //     } else {\n          //       return 0; // Dates are equal, so return 0\n          //     }\n          //   }\n          //   return 0; // If either date is missing, maintain the order\n          // });\n          setData(results);\n        })\n        .catch(error => console.log('error', error));\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n    return results;\n  }\n\n  useEffect(() => {\n    const tableName = \"Announcements\"\n    const fetchData = async () => {\n      try {\n        const response: any = await getPublicServerData(`${tableName}`)\n      } catch (error) {\n        console.log(\"An error occurred while fetching data.\");\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleTitleClick = (newsItem: any) => {\n    setSelectedNews(newsItem);\n    setUrl(`https://www.gruene-washington.de/Neuigkeiten/${newsItem?.Title}`);\n  };\n  const closePanel = () => {\n    setSelectedNews(null);\n  }\n\n  const CustomHeader = () => {\n    return (\n      <>\n        <div className=\"align-items-center d-flex justify-content-between w-100\">\n          <h3 className=\"m-0\">News Details</h3>\n          <div className=\"Shareon align-items-baseline d-flex mb-0\">\n            <h6>Share :</h6>\n            <SocialMediaIcon platform=\"facebook\" postUrl={url} />\n            <SocialMediaIcon platform=\"twitter\" postUrl={url} />\n            <SocialMediaIcon platform=\"linkedin\" postUrl={url} />\n            <SocialMediaIcon platform=\"copy-link\" postUrl={url} />\n            <span className=\"svg__iconbox svg__icon--cross\" style={{ position: \"relative\", top: \"6px\" }} onClick={closePanel}></span>\n          </div>\n        </div>\n\n      </>\n    );\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth < 768) {\n        setSlidesToShow(1);\n        setSlidesToScroll(1);\n      } else if (window.innerWidth < 1200) {\n        setSlidesToShow(2);\n        setSlidesToScroll(2);\n      } else {\n        setSlidesToShow(3);\n        setSlidesToScroll(3);\n      }\n    };\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  const formatDate = (dateString: any) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-GB\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n    });\n  };\n\n  return (\n    <div className=\"section EventsCardSection\">\n      <div className=\"container\">\n        <div className=\"section-header\">\n          <h2 className=\"sectionHeading\">NEUIGKEITEN</h2>\n          <div className=\"pull-right\">\n            <button onClick={handlePrev} className=\"button_color\" disabled={currentSlide === 0}>\n              {/* <i className=\"fa fa-angle-left\" aria-hidden=\"true\"></i> */}\n              <IoChevronBackOutline />\n            </button>\n            <button onClick={handleNext} className=\"button_color\" disabled={currentSlide === data?.length - settings.slidesToShow!}>\n              {/* <i className=\"fa fa-angle-right\" aria-hidden=\"true\"></i> */}\n              <IoChevronForwardOutline />\n            </button>\n          </div>\n        </div>\n        <Slider ref={sliderRef} {...settings}>\n          {data &&\n            data.map((item: any) => (\n              <div key={item.id} className=\"\">\n                <div className=\"card border-0\" style={{ position: \"relative\" }}>\n                  <img className=\"card-img-top\" src={item?.ItemCover == \"\" ? \"https://gruene-washington.de/PublishingImages/Covers/Default_img.jpg\" : item?.ItemCover ?? \"https://gruene-washington.de/PublishingImages/Covers/Default_img.jpg\"} />\n                  <div className=\"card-body\">\n                    <div className=\"entry-meta\">\n                      <IoCalendarOutline />\n                      <span>\n                        {formatDate(item?.PublishingDate)}\n                      </span>\n                    </div>\n                    <h4 className=\"card-title\" onClick={() => handleTitleClick(item)}>\n                      <a> {item?.Title}</a>\n                      {/* <Link\n                          to={`/${item.Title.toLowerCase()}/?ItemID=${item.id}&Site=Public`}\n                          className=\"nav-link\"\n                        >\n                          {item?.Title}\n                        </Link> */}\n                    </h4>\n                    {/* <div className=\"eventItemDesc cutoff-text\" dangerouslySetInnerHTML={{ __html: item?.Body }}>\n                    </div>\n\n                    <input className=\"expand-btn\" type=\"checkbox\" /> */}\n                    {/* \n                    { item?.Body != undefined && item?.Body?.length > 0 ?\n                        <>\n                        <div className=\"eventItemDesc cutoff-text\" dangerouslySetInnerHTML={{ __html: item?.Body }}></div>\n                        {item?.Body?.length>200 && <input className=\"expand-btn\" type=\"checkbox\" />}\n                        </>\n                          : ''\n                      } */}\n\n                    {item?.Body?.length > 0 && <>\n                      <div className=\"eventItemDesc cutoff-text\">\n                        <p>\n                          <HTMLRenderer content={item.Body} />\n                        </p>\n                      </div>\n                      {!(item?.Body?.length <= 200) && <input className=\"expand-btn\" type=\"checkbox\" />}\n                    </>}\n\n                  </div>\n                </div>\n              </div>\n            ))}\n        </Slider>\n\n      </div>\n      {selectedNews && (\n        <NewsPanel selectedNews={selectedNews} onClose={closePanel} url={url} />\n      )}\n    </div>\n  );\n}\n\nexport default Home_slider1;\n\n"],"names":["sliderRef","useRef","data","setData","useState","slidesToShow","setSlidesToShow","slidesToScroll","setSlidesToScroll","currentSlide","setCurrentSlide","selectedNews","setSelectedNews","url","setUrl","settings","dots","speed","infinite","autoplay","autoplaySpeed","beforeChange","oldIndex","newIndex","HTMLRenderer","_ref","content","_jsx","className","dangerouslySetInnerHTML","__html","useEffect","async","results","myHeaders","Headers","append","raw","JSON","stringify","concat","tableName","fetch","method","headers","body","redirect","then","response","text","result","_result","console","log","parse","sort","a","b","dateA","Date","PublishingDate","catch","error","getPublicServerData","fetchData","closePanel","handleResize","window","innerWidth","addEventListener","removeEventListener","_jsxs","children","onClick","handlePrev","current","prev","slickPrev","disabled","IoChevronBackOutline","handleNext","length","slickNext","IoChevronForwardOutline","Slider","_objectSpread","ref","map","item","_item$ItemCover","_item$Body","_item$Body2","dateString","style","position","src","ItemCover","IoCalendarOutline","toLocaleDateString","day","month","year","handleTitleClick","newsItem","Title","Body","_Fragment","type","id","NewsPanel","onClose"],"sourceRoot":""}